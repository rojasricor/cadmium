#!/bin/bash
set -e
dmesg --console-off # make kernel shut up

echo "Welcome to Cadmium installer"
echo "Choose your fate:"
echo "1: Installation to internal memory"
#echo "2: Installation to internal memory, with dual-booting ChromeOS"
echo "2: Installation to this medium"
echo "3: Drop to shell"

opt=inv
until [ "$opt" != "inv" ]; do
	read -p ": " opt
done

case $opt in
	1) INSTMED="emmc" ;; # install medium
	2) INSTMED="this" ;;
#	3) INSTMED="oxide" ;;
	3) exit 0 ;;
esac

CADMIUMROOT="/CdFiles"

# try finding current device in cadmium tree

TARGET=none
COMPATIBLE="$(cat /sys/firmware/devicetree/base/compatible)"
for x in $(find $CADMIUMROOT/board/* -type d -printf '%f\n'); do
	try=$(echo $COMPATIBLE | grep $x) || true
	if [ -n "$try" ]; then
		echo "Found device from compatible string: $x"
		TARGET="$x"
	fi
done

if [ $TARGET = none ]; then
	echo "Failed to autodetect device, bailing out"
	exit 1
fi

. $CADMIUMROOT/board/$TARGET/boardinfo
. $CADMIUMROOT/baseboard/$BASEBOARD/boardinfo
#echo "$SOC $BOARD $BASEBOARD"

# don't even try installing if the device is about to die
for x in /sys/class/power_supply/*; do
	echo "Trying path: $x"
	if [ "$(cat $x/device/name)" = 'sbs-battery' -o "$(cat $x/device/name)" = 'bq27500' ]; then
		echo "Found battery at $x"
		BAT=$x
	fi
done

if [ "$BAT" = "NOTFOUND" ]; then
	. /CdFiles/info
	echo "Debug info: K: $KERNEL R: $ROOTFS B: $BASEBOARD T: $BOARD"
	echo "Uh oh, automatic battery detection failed"
	echo "Make a photo of this screen and include it in issue on Cadmium Github page"
fi

BATCAPACITY="$(cat $BAT/capacity)"

if [ "$BATCAPACITY" -le 30 ]; then
	echo "Looks like your device is about to discharge"
	echo "Bailing out for safety reasons"
	exit 1
fi

if [ "$BASEBOARD" = "trogdor" ]; then
	make -j$(nproc) -C /CdFiles/qmic install prefix=/usr
	echo qmic >> /CdFiles/installed_progs
	make -j$(nproc) -C /CdFiles/qrtr install prefix=/usr
	echo qrtr >> /CdFiles/installed_progs
	make -j$(nproc) -C /CdFiles/rmtfs install prefix=/usr
	echo rmtfs >> /CdFiles/installed_progs

	systemctl start rmtfs # TODO: make this work on voidlinux
	sleep 10 # wait for ath10k_snoc to do its thing
fi

nmcli device wifi rescan
sleep 4 # wait for wifi networks
nmtui connect

# try finding emmc
MMCDEV="$(ls /dev/mmcblk* | grep -F boot0 | sed 's/boot0//')"

. $CADMIUMROOT/config
. $CADMIUMROOT/fs/$ROOTFS/info

# try finding out bootloader
BOOTFW=unknown
if cat /proc/cmdline | grep -s cros_secure >/dev/null 2>&1; then
	$FS_INST_PKG $FS_PKGS_CD_BOOTFW_DEPTHCHARGE
	BOOTFW=depthcharge
	BOOTFW_PKGS="$FS_PKGS_CD_BOOTFW_DEPTHCHARGE"
fi

if [ "$BOOTFW" = "unknown" ]; then
	echo "Seems the automatic bootloader detection failed"
	echo "Bailing out, you're on your own"
	exit 1
fi

export chroot="chroot"

DESTDIR=/
if [ $INSTMED != this ]; then
	# setup partitions
	case $INSTMED in
		oxide)
			;;
		emmc)
			dd if=/dev/zero of=$MMCDEV bs=512k count=128 seek=$EMMC_OFFSET
			parted --script $MMCDEV mklabel gpt >/dev/null 2>&1 || true # ???
			cgpt create $MMCDEV
			cgpt add -i 1 -t kernel   -b $(expr 8192 + $EMMC_OFFSET)          -s 65536 -l MMCKernelA -S 1 -T 2 -P 10  ${MMCDEV}
			cgpt add -i 2 -t kernel   -b $(expr 73728 + $EMMC_OFFSET)         -s 65536 -l MMCKernelB -S 0 -T 2 -P 5   ${MMCDEV}	
			cgpt add -i 3 -t data     -b $(expr 139264 + $EMMC_OFFSET)        -s $(expr $(cgpt show ${MMCDEV} | grep 'Sec GPT table' | awk '{print $1}') - $(expr 139264 + $EMMC_OFFSET)) -l Root ${MMCDEV}
			# i sure do love confusing one-liners

			ROOTPART=/dev/disk/by-partlabel/Root
			KERNPART=/dev/disk/by-partlabel/MMCKernelA

			;;
	esac

	# force rescan partitions
	sleep 1
	partx -a $MMCDEV >/dev/null 2>&1 || true
	sleep 1

	dd if=/dev/disk/by-partlabel/SDKernelA of=/dev/disk/by-partlabel/MMCKernelA
	case "$FILESYSTEM" in
		f2fs)
			mkfs.f2fs -f $ROOTPART -t 0
		;;
		ext4)
			mkfs.ext4 -F $ROOTPART
		;;
	esac

	mount $ROOTPART /mnt
	DESTDIR=/mnt

	if [ "$ROOTFS" = "arch" ]; then
		export chroot="arch-chroot";
	fi
	$CADMIUMROOT/fs/$ROOTFS/build $DESTDIR

	cp -r /CdFiles $DESTDIR/CdFiles

	mkdir -p $DESTDIR/lib/firmware
	cp -r /lib/firmware/* $DESTDIR/lib/firmware/
	mkdir -p $DESTDIR/lib/modules
	cp -r /lib/modules/$(uname -r) $DESTDIR/lib/modules/$(uname -r)
fi

if [ -f "$CADMIUMROOT/board/$BOARD/local-overrides.quirks" ]; then
	mkdir -p $DESTDIR/etc/libinput
	cp "$CADMIUMROOT/board/$BOARD/local-overrides.quirks" $DESTDIR/etc/libinput/local-overrides.quirks
fi

if [ -f "$CADMIUMROOT/board/$BOARD/accel-matrix.hwdb" ]; then
	mkdir -p $DESTDIR/etc/udev/hwdb.d
	cp $CADMIUMROOT/board/$BOARD/accel-matrix.hwdb $DESTDIR/etc/udev/hwdb.d
	$chroot $DESTDIR udevadm hwdb -u
fi

if [ "$BASEBOARD" = "trogdor" ]; then
	make -C /CdFiles/qmic prefix=$DESTDIR/usr install
	make -C /CdFiles/qrtr prefix=$DESTDIR/usr install
	make -C /CdFiles/rmtfs prefix=$DESTDIR/usr install
	$chroot $DESTDIR systemctl enable rmtfs
fi

$chroot $DESTDIR $FS_INST_PKG $BOOTFW_PKGS

if [ "$FS_HAS_OOBE" = "false" ]; then
	echo "Enter root password:"
	until $chroot $DESTDIR passwd root; do
		echo "Enter root password:"
	done

	read -p "Enter username, no spaces or big letters: "
	$chroot $DESTDIR useradd -G "$FS_USERGROUPS" -s /bin/bash -m $REPLY

	echo "Enter user password:"
	until $chroot $DESTDIR passwd $REPLY; do
		echo "Enter user password:"
	done

	export USERNAME=$REPLY

	if [ -n "$FS_SUPPORTED_UIS" ]; then
		UI_CHOICE="invalid"
		until [ "$UI_CHOICE" != "invalid" ]; do
			echo "Choose UI that you want:"
			echo -n "One of: $FS_SUPPORTED_UIS or none"
			read -p '? ' UI_CHOICE
			# make sure user doesnt try installing unsupported ui
			if ! echo "$FS_SUPPORTED_UIS none" | grep -q "$UI_CHOICE"; then
				UI_CHOICE=invalid
			fi
		done

		$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_BASE

		if [ "$UI_CHOICE" != "none" ]; then
			$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_BASE
			case $UI_CHOICE in
				sway)
					# TODO: config
					$chroot $DESTDIR $FS_INST_PKG $FS_PKGS_CD_UI_SWAY

					MODKEY="invalid"
					until [ "$MODKEY" != "invalid" ]; do
						echo "Options for sway Mod key:"
						echo "1: Search key(default)"
						echo "2: Left Alt key"
						read -p '? ' MODKEY
						if ! echo "1 2" | grep -q "$MODKEY"; then
							MODKEY=invalid
						fi
					done
					case $MODKEY in
						1) MODKEY=Mod4 ;;
						2) MODKEY=Mod1 ;;
					esac


					# add sway config shim to cover up hardware differences between cadmium devices and whatever sway thinks is default
					echo "input type:touch map_to_output $WLR_DISP" > $DESTDIR/etc/sway/cadmium-shim.conf
					echo "input type:tablet_tool map_to_output $WLR_DISP" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "input type:touchpad click_method clickfinger" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "output $WLR_DISP transform $DISP_ROTATION" >> $DESTDIR/etc/sway/cadmium-shim.conf

					# and also keybinds
					echo 'bindsym '$MODKEY'+F4 exec sh -c grim -g "$(slurp)" - | wl-copy' >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F6 exec brightnessctl s 5%-" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F7 exec brightnessctl s 5%+" >> $DESTDIR/etc/sway/cadmium-shim.conf

					echo "bindsym $MODKEY+F8 exec pactl set-sink-mute @DEFAULT_SINK@ toggle" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F9 exec pactl set-sink-volume @DEFAULT_SINK@ -5%" >> $DESTDIR/etc/sway/cadmium-shim.conf
					echo "bindsym $MODKEY+F10 exec pactl set-sink-volume @DEFAULT_SINK@ +5%" >> $DESTDIR/etc/sway/cadmium-shim.conf

					# enable cadmium shim
					(echo "include /etc/sway/cadmium-shim.conf" && cat $DESTDIR/etc/sway/config) > /tmp/sway-newconf.conf
					mv /tmp/sway-newconf.conf $DESTDIR/etc/sway/config

					# now you may ask me, "how does this work?" and the answer is: chuj wie
					sed -i'' 's/^\s*status_command.*$/status_command/g' $DESTDIR/etc/sway/config
					sed -i'' 's/^status_command/status_command while echo B: $(cat PLACEHOLDER_BAT\/capacity)\\%, $(date --date="@$(cat PLACEHOLDER_BAT\/time_to_empty_avg)" +"%H:%m") \\| T: $(date +"%d-%m-%Y  %k:%M:%S\"); do sleep 1; done/g' $DESTDIR/etc/sway/config
					sed -i'' "s#PLACEHOLDER_BAT#$BAT#g" $DESTDIR/etc/sway/config

					sed -i'' "s/Mod4/$MODKEY/g" $DESTDIR/etc/sway/config

					echo 'tty | grep tty1 && exec sway' >> $DESTDIR/home/$USERNAME/.bashrc
					;;
			esac
			cp -r $CADMIUMROOT/fs/ucm/* $DESTDIR/usr/share/alsa/ucm2/conf.d/
		fi
	else
		echo "Looks like, $FS_FANCYNAME does not support user environments"
		echo "Skipping..."
	fi
fi

if [ $INSTMED != this ]; then
	umount /mnt
fi
echo "Done!"
